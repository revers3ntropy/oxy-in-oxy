export class Parser {
    tokens: List<Token>,

    def parse (tokens: List<Token>) Result<AstNode, OxyError> {
        return (new Parser { tokens }).gen_ast()
    }

    def gen_ast (self) Result<AstNode, OxyError> {
		let statements = List.empty!<AstNode>()
    	for token in self.tokens {
			if token.token_type == TT_INT {
				statements.push(IntNode.make(
					token.value.unwrap().Int().unwrap(),
					token.loc
				))
			} else {
				return Result.err!<AstNode, OxyError>(
					OxyError.syntax_err("unexpected token", token.loc)
				)
			}
    	}

		return Result.ok!<AstNode, OxyError>(
		    RootNode.make(
			    StatementsNode.make(statements)
            )
		)
	}
}