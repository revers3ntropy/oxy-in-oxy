#include "parser.oxy"
#include "lexer.oxy"
#include "token.oxy"
#include "position.oxy"
#include "error.oxy"
#include "types.oxy"
#include "ast/ast_node.oxy"
#include "ast/int_node.oxy"

def compile (source: Str, path: Str) Result<Str, OxyError> {
	let lex_result = Lexer.lex(source, path)
    if !lex_result.ok {
		return Result.err!<Str, OxyError>(lex_result.error().unwrap())
    }
    let tokens = lex_result.unwrap()
    print("\nTokens:")
    for token in tokens -> print(token.Str())

    let parse_result = Parser.parse(tokens)
	if !parse_result.ok {
		return Result.err!<Str, OxyError>(parse_result.error().unwrap())
	}
	let ast = parse_result.unwrap()
    print("\nAST:")
    print(ast.Str())

    let gen_ir_result = ast.gen_llvmir()
    if !gen_ir_result.ok {
    		return Result.err!<Str, OxyError>(gen_ir_result.error().unwrap())
	}
	let llvmir = gen_ir_result.unwrap()

	print("\nLLVM IR:")
	print(llvmir)

    return Result.ok!<Str, OxyError>(llvmir)
}

def main (args: List<Utf8Str>) {
	if args.len() != 2 {
		print("Usage: ./compiler <filename>")
	}

	let path = args.at_raw(1).Str()
	let file = File.read(path)
	if !file.is_some {
		print("Could not open file")
		return
	}
	let source = file.unwrap()
	let result = compile(source, path)
	if !result.ok {
		print(result.error().unwrap().Str())
		return
	}

	let output_path = path + ".ll"
	let output_file = File.open(output_path, "w")
	if !output_file.is_some {
		print("Could not create output file")
		return
	}
	let output = output_file.unwrap()
	output.write(result.unwrap())
	output.close()
}