def test_lexer (tr: TestRunner) {
	tr.it("tokenises a single integer", fn (tr: TestRunner) {
		let program = "12"
		let lexer_res = Lexer.lex(program, "lexer-test.oxy")
		tr.expect_ok!<List<Token>>(lexer_res)
		let tokens = lexer_res.unwrap()
		tr.expect!<Int>(tokens.len()).to_be(1)
		tr.expect!<Int>(tokens.at_raw(0).token_type).to_be(TT_INT)
	})

	tr.it("tokenises multiple integers", fn (tr: TestRunner) {
		let program = "12 3 6789"
		let lexer_res = Lexer.lex(program, "lexer-test.oxy")
		tr.expect_ok!<List<Token>>(lexer_res)
		let tokens = lexer_res.unwrap()
		tr.expect!<Int>(tokens.len()).to_be(3)
		tr.expect!<Int>(tokens.at_raw(0).token_type).to_be(TT_INT)
		tr.expect!<Int>(tokens.at_raw(1).token_type).to_be(TT_INT)
		tr.expect!<Int>(tokens.at_raw(2).token_type).to_be(TT_INT)
	})

	tr.it("tokenises a string", fn (tr: TestRunner) {
		let program = "\"hi\""
		let tokens = Lexer.lex(program, "lexer-test.oxy").unwrap()
		tr.expect!<Int>(tokens.len()).to_be(1)
		tr.expect!<Int>(tokens.at_raw(0).token_type).to_be(TT_STRING)
	})

	tr.it("tokenises a character literal", fn (tr: TestRunner) {
		let tokens = Lexer.lex("'a'", "lexer-test.oxy").unwrap()
		tr.expect!<Int>(tokens.len()).to_be(1)
		tr.expect!<Int>(tokens.at_raw(0).token_type).to_be(TT_CHAR)
	})

	tr.it("does not tokenise an invalid character literal", fn (tr: TestRunner) {
		let lexer_res = Lexer.lex("'abc'", "lexer-test.oxy")
		tr.expect!<Bool>(lexer_res.ok).to_be(false)
	})

	tr.it("ignores comments but does not ignore tokens before or after", fn (tr: TestRunner) {
		let program = "12 // comment\n 'b'"
		let tokens = Lexer.lex(program, "lexer-test.oxy").unwrap()
		tr.expect!<Int>(tokens.len()).to_be(2)
		tr.expect!<Int>(tokens.at_raw(0).token_type).to_be(TT_INT)
		tr.expect!<Int>(tokens.at_raw(1).token_type).to_be(TT_CHAR)
	})

	tr.it("tokenises operators and symbols", fn (tr: TestRunner) {
		let program = "+ - * / ( ) % , . ; = == { } [ ] || & && > < >= <= != : # ? ?. ?? -> ! !."
		let tokens = Lexer.lex(program, "lexer-test.oxy").unwrap()
		tr.expect!<Int>(tokens.len()).to_be(31)
		tr.expect!<Int>(tokens.at_raw(0).token_type).to_be(TT_PLUS)
		tr.expect!<Int>(tokens.at_raw(1).token_type).to_be(TT_DASH)
		tr.expect!<Int>(tokens.at_raw(2).token_type).to_be(TT_ASTRIX)
		tr.expect!<Int>(tokens.at_raw(3).token_type).to_be(TT_F_SLASH)
		tr.expect!<Int>(tokens.at_raw(4).token_type).to_be(TT_OPEN_PAREN)
		tr.expect!<Int>(tokens.at_raw(5).token_type).to_be(TT_CLOSE_PAREN)
		tr.expect!<Int>(tokens.at_raw(6).token_type).to_be(TT_PERCENT)
		tr.expect!<Int>(tokens.at_raw(7).token_type).to_be(TT_COMMA)
		tr.expect!<Int>(tokens.at_raw(8).token_type).to_be(TT_DOT)
		tr.expect!<Int>(tokens.at_raw(9).token_type).to_be(TT_END_STATEMENT)
		tr.expect!<Int>(tokens.at_raw(10).token_type).to_be(TT_DBL_EQUALS)
		tr.expect!<Int>(tokens.at_raw(11).token_type).to_be(TT_OPEN_BRACE)
		tr.expect!<Int>(tokens.at_raw(12).token_type).to_be(TT_CLOSE_BRACE)
		tr.expect!<Int>(tokens.at_raw(13).token_type).to_be(TT_OPEN_SQ_BRACKET)
		tr.expect!<Int>(tokens.at_raw(14).token_type).to_be(TT_CLOSE_SQ_BRACKET)
		tr.expect!<Int>(tokens.at_raw(15).token_type).to_be(TT_DBL_PIPE)
		tr.expect!<Int>(tokens.at_raw(16).token_type).to_be(TT_AMPERSAND)
		tr.expect!<Int>(tokens.at_raw(17).token_type).to_be(TT_DBL_AMPERSAND)
		tr.expect!<Int>(tokens.at_raw(18).token_type).to_be(TT_GT)
		tr.expect!<Int>(tokens.at_raw(19).token_type).to_be(TT_LT)
		tr.expect!<Int>(tokens.at_raw(20).token_type).to_be(TT_GTE)
		tr.expect!<Int>(tokens.at_raw(21).token_type).to_be(TT_LTE)
		tr.expect!<Int>(tokens.at_raw(22).token_type).to_be(TT_BANG_EQ)
		tr.expect!<Int>(tokens.at_raw(23).token_type).to_be(TT_COLON)
		tr.expect!<Int>(tokens.at_raw(24).token_type).to_be(TT_HASH)
		tr.expect!<Int>(tokens.at_raw(25).token_type).to_be(TT_QM)
		tr.expect!<Int>(tokens.at_raw(26).token_type).to_be(TT_QM_DOT)
		tr.expect!<Int>(tokens.at_raw(27).token_type).to_be(TT_DOUBLE_QM)
		tr.expect!<Int>(tokens.at_raw(28).token_type).to_be(TT_ARROW)
		tr.expect!<Int>(tokens.at_raw(29).token_type).to_be(TT_BANG)
		tr.expect!<Int>(tokens.at_raw(30).token_type).to_be(TT_BANG_DOT)
	})
}