export class AstNode {
	id: Int,
	node: Ptr<Void>,

	def from_node<T>(id: Int, node: T) -> new AstNode {
		node: #unchecked_cast(Ptr<Void>, node),
		id
	},

	def gen_llvmir(self) Result<Str, OxyError> {
		if self.id == NID_INT {
			return #unchecked_cast(IntNode, self.node).gen_llvmir()
		}
		panic("Unknown node ID: " + self.id.Str())
		return Result.ok!<Str, OxyError>("")
	}

	def Str (self) Str {
		if self.id == NID_INT {
			return #unchecked_cast(IntNode, self.node).Str()
		}
		panic("Unknown node ID: " + self.id.Str())
		return ""
	}
}