export class Lexer {
	program: Str,
	position: Position,
	current_char: Option<Char>,
	next_char: Option<Char>,

	def lex (program: Str, file_path: Str) Result<List<Token>, OxyError> {
		let lexer = new Lexer {
			program,
			position: new Position { file_path, idx: -1, line: 0, col: -1 },
			current_char: Option.none!<Char>(),
			next_char: Option.none!<Char>()
	  	}
	  	return lexer.tokenise()
	}

	def tokenise (self) Result<List<Token>, OxyError> {
		let tokens = List.empty!<Token>()

		if self.program.len() < 1 {
			return Result.ok!<List<Token>, OxyError>(tokens)
		}

		self.advance()

		while self.current_char.is_some {
			let c = self.current_char.unwrap()
			let start = self.position.clone()

			if c.is_whitespace() {
				self.advance()
				continue
			}

		  	// make a number
			if c.is_digit() {
				// build a number while we can
				let mut number = ""
				while self.current_char.unwrap().is_digit() {
					number += self.current_char.unwrap().Str()
					self.advance()
					if !self.current_char.is_some ->
						break
				}
				tokens.push(new Token {
					token_type: TT_INT,
					value: Option.some!<Str>(number),
					loc: new Interval { start, end: self.position.clone() }
				})
				continue
			}

			// make an identifier
			if c.is_alphabetic() || c == '_' {
				// build a word while we can
				let mut word = ""
				while
					self.current_char.unwrap().is_alphanumeric()
				    || self.current_char.unwrap() == '_'
				{
					word += self.current_char.unwrap().Str()
					self.advance()
					if !self.current_char.is_some ->
						break
				}
				tokens.push(new Token {
					token_type: TT_ID,
					value: Option.some!<Str>(word),
					loc: new Interval { start, end: self.position.clone() }
				})
				continue
			}

			// make a string
			if c == '"' {
				let str_res = self.make_string()
				if !str_res.ok {
					return Result.err!<List<Token>, OxyError>(str_res.error().unwrap())
				}
				tokens.push(str_res.unwrap())
				continue
			}

			// make a character literal
			if c == '\'' {
				let char_res = self.make_char_literal()
				if !char_res.ok {
					return Result.err!<List<Token>, OxyError>(char_res.error().unwrap())
				}
				tokens.push(char_res.unwrap())
				continue
			}

			// make a comment
			if c == '/' && self.next_char_is('/') {
				while self.current_char.is_some && self.current_char.unwrap() != '\n' {
					self.advance()
				}
				continue
			}

			return Result.err!<List<Token>, OxyError>(OxyError.syntax_err(
				"unexpected character",
				Interval.from_pos(self.position.clone())
			))
		}

		return Result.ok!<List<Token>, OxyError>(tokens)
	}

	def advance (self) {
		self.position = self.position.next(self.current_char)

		if self.position.idx >= self.program.len() {
			self.current_char = Option.none!<Char>()
			self.next_char = Option.none!<Char>()
			return
		}

		self.current_char = Option.some!<Char>(self.program.at_raw(self.position.idx))
		self.next_char = self.program.at(self.position.idx + 1)
	}

	def next_char_is (self, c: Char) Bool {
		if !self.next_char.is_some ->
			return false
		return self.next_char.unwrap() == c
	}

	def make_string (self) Result<Token, OxyError> {
		let start = self.position.clone()
		self.advance()
		let mut string = ""
		while self.current_char.is_some && self.current_char.unwrap() != '"' {
			string += self.current_char.unwrap().Str()
			self.advance()
		}
		if !self.current_char.is_some {
			return Result.err!<Token, OxyError>(OxyError.syntax_err(
				"unterminated string",
				Interval.from_pos(start)
			))
		}
		self.advance()
		return Result.ok!<Token, OxyError>(new Token {
			token_type: TT_STRING,
			value: Option.some!<Str>(string),
			loc: new Interval { start, end: self.position.clone() }
		})
	}

	def make_char_literal (self) Result<Token, OxyError> {
		let start = self.position.clone()
		self.advance()
		let c = self.current_char.unwrap()
		self.advance()
		if self.current_char.unwrap() != '\'' {
			return Result.err!<Token, OxyError>(OxyError.syntax_err(
				"unterminated character literal",
				Interval.from_pos(start)
			))
		}
		self.advance()
		return Result.ok!<Token, OxyError>(new Token {
			token_type: TT_CHAR,
			value: Option.some!<Str>(c.Str()),
			loc: new Interval { start, end: self.position.clone() }
		})
	}
}